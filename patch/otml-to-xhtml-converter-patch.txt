### Eclipse Workspace Patch 1.0
#P otrunk
Index: src/java/org/concord/otrunk/OTMLToXHTMLConverter.java
===================================================================
--- src/java/org/concord/otrunk/OTMLToXHTMLConverter.java	(revision 18111)
+++ src/java/org/concord/otrunk/OTMLToXHTMLConverter.java	(working copy)
@@ -1,4 +1,12 @@
 /*
+ * This patch makes the Converter open each 
+ * component into a frame and render them before making an image of them.
+ * 
+ * It will greatly slow down printing an activity, since we have to wait for
+ * every component to be rendered before we make images.
+ */
+
+/*
  *  Copyright (C) 2004  The Concord Consortium, Inc.,
  *  10 Concord Crossing, Concord, MA 01742
  *
@@ -24,6 +32,7 @@
 package org.concord.otrunk;
 
 import java.awt.Dimension;
+import java.awt.EventQueue;
 import java.awt.image.BufferedImage;
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -34,6 +43,7 @@
 import java.util.regex.Pattern;
 
 import javax.swing.JComponent;
+import javax.swing.JFrame;
 import javax.swing.SwingUtilities;
 
 import org.concord.framework.otrunk.OTControllerService;
@@ -72,6 +82,8 @@
 	private int containerDisplayHeight;
 
 	private File outputFile;
+	
+	private JFrame frame;
 
 	OTJComponentService jComponentService;
 	private OTControllerService controllerService;
@@ -297,7 +309,7 @@
 	 * on it.
 	 * 
 	 */
-	public String embedComponent(JComponent comp, float scaleX, float scaleY,
+	public String embedComponent(final JComponent comp, float scaleX, float scaleY,
 	    OTObject otObject)
 	{
 		Dimension compSize = comp.getSize();
@@ -307,9 +319,39 @@
 			        + compSize.width + " height: " + compSize.height
 			        + " cannot be <=0");
 		}
+		
+//		comp.addNotify();
+//		comp.validate();
+        EventQueue.invokeLater(new Runnable(){
 
-		comp.addNotify();
-		comp.validate();
+			public void run()
+            {
+        		frame = new JFrame();
+        		frame.getContentPane().add(comp);
+        		frame.pack();
+        		frame.setVisible(true);
+            }});
+        
+        try {
+            Thread.sleep(1000);
+        } catch (InterruptedException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
+        
+        EventQueue.invokeLater(new Runnable(){
+
+			public void run()
+            {
+                frame.pack();
+            }});
+        
+        try {
+            Thread.sleep(10);
+        } catch (InterruptedException e) {
+            // TODO Auto-generated catch block
+            e.printStackTrace();
+        }
 
 		String outputFileNameWithoutExtension = outputFile.getName().substring(
 		        0, outputFile.getName().lastIndexOf('.'));
@@ -330,6 +372,8 @@
 		} catch (InvocationTargetException e) {
 			e.printStackTrace();
 		}
+		
+		frame.dispose();
 
 		return saver.getText();
 	}
